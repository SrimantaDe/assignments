Q1. How do you load a CSV file into a Pandas DataFrame?
> 	import pandas as pd
	csv_file_path = 'path/to/mycomputer/file.csv'
	df = pd.read_csv(csv_file_path)
	print(df.head())

Q2. How do you check the data type of a column in a Pandas DataFrame?
> 	import pandas as pd
	csv_file_path = 'path/to/mycomputer/file.csv'
	df = pd.read_csv(csv_file_path)
	print(df.dtypes)
	print(df['column_name'].dtype)
	
Q3. How do you select rows from a Pandas DataFrame based on a condition?
>	import pandas as pd
	csv_file_path = 'path/to/mycomputer/file.csv'
	df = pd.read_csv(csv_file_path)
	condition = df['column_name'] > 10
	selected_rows = df[condition]
	print(selected_rows)

Q4. How do you rename columns in a Pandas DataFrame?
>	import pandas as pd
	df.rename(columns={'old_column_name': 'new_column_name'}, inplace=True)
	df.rename(columns={'old_column_name1': 'new_column_name1', 'old_column_name2': 'new_column_name2'}, inplace=True)
	print(df)

Q5. How do you drop columns in a Pandas DataFrame?
>	import pandas as pd
	df.drop('column_name', axis=1, inplace=True)
	columns_to_drop = ['column_name1', 'column_name2']
	df.drop(columns_to_drop, axis=1, inplace=True)
	print(df)
	
Q6. How do you find the unique values in a column of a Pandas DataFrame?
> 	import pandas as pd
	unique_values = df['column_name'].unique()
	print(unique_values)

Q7. How do you find the number of missing values in each column of a Pandas DataFrame?
> 	import pandas as pd
	missing_values_count = df.isna().sum()
	print(missing_values_count)

Q8. How do you fill missing values in a Pandas DataFrame with a specific value?
> 	import pandas as pd
	df_filled = df.fillna('your_specific_value')
	print(df_filled)

Q9. How do you concatenate two Pandas DataFrames?
>	import pandas as pd
	concatenated_df = pd.concat([df1, df2])
	print(concatenated_df)
	
Q10. How do you merge two Pandas DataFrames on a specific column?
>	import pandas as pd
	merged_df = pd.merge(df1, df2, on='common_column')
	print(merged_df)
	
Q11. How do you group data in a Pandas DataFrame by a specific column and apply an aggregation function?
>	import pandas as pd
	grouped_data = df.groupby('column_name').agg({'column_to_aggregate': 'aggregation_function'})
	print(grouped_data)

Q12. How do you pivot a Pandas DataFrame?
> 	import pandas as pd
	pivoted_df = df.pivot(index='index_column', columns='columns_to_pivot', values='values_column')
	print(pivoted_df)

Q13. How do you change the data type of a column in a Pandas DataFrame?
>	import pandas as pd
	df['column_name'] = df['column_name'].astype('new_data_type')
	print(df)

Q14. How do you sort a Pandas DataFrame by a specific column?
> 	import pandas as pd
	sorted_df = df.sort_values('column_name')
	print(sorted_df)

Q15. How do you create a copy of a Pandas DataFrame?
>	import pandas as pd
	df_copy = df.copy()
	print(df_copy)

Q16. How do you filter rows of a Pandas DataFrame by multiple conditions?
>	import pandas as pd
	filtered_df = df[(df['column1'] > value1) & (df['column2'] == value2) | (df['column3'] < value3)]
	print(filtered_df)

Q17. How do you calculate the mean of a column in a Pandas DataFrame?
>	import pandas as pd
	column_mean = df['column_name'].mean()
	print(column_mean)

Q18. How do you calculate the standard deviation of a column in a Pandas DataFrame?
>	import pandas as pd
	column_std = df['column_name'].std()
	print(column_std)

Q19. How do you calculate the correlation between two columns in a Pandas DataFrame?
>	import pandas as pd
	data = {
		'column1': [1, 2, 3, 4, 5],
		'column2': [5, 4, 3, 2, 1]
	}
	df = pd.DataFrame(data)
	correlation = df['column1'].corr(df['column2'])
	print("Correlation:", correlation)

Q20. How do you select specific columns in a DataFrame using their labels?
>	import pandas as pd
	data = {
		'column1': [1, 2, 3, 4, 5],
		'column2': [5, 4, 3, 2, 1],
		'column3': ['a', 'b', 'c', 'd', 'e']
	}
	df = pd.DataFrame(data)
	selected_columns = df[['column1', 'column3']]

	print(selected_columns)

Q21. How do you select specific rows in a DataFrame using their indexes?
>	import pandas as pd
	data = {
		'column1': [1, 2, 3, 4, 5],
		'column2': [5, 4, 3, 2, 1],
	}
	df = pd.DataFrame(data)
	selected_rows = df.iloc[[1, 3]]
	print(selected_rows)

Q22. How do you sort a DataFrame by a specific column?
>	import pandas as pd
	data = {
		'column1': [4, 2, 3, 1, 5],
		'column2': [5, 4, 3, 2, 1],
	}
	df = pd.DataFrame(data)
	sorted_df = df.sort_values('column1')

	print(sorted_df)

Q23. How do you create a new column in a DataFrame based on the values of another column?
>	import pandas as pd
	data = {
		'column1': [1, 2, 3, 4, 5],
	}
	df = pd.DataFrame(data)
	df['new_column'] = df['column1'] * 2
	print(df)

Q24. How do you remove duplicates from a DataFrame?
>	import pandas as pd
	data = {
		'column1': [1, 2, 3, 2, 1],
		'column2': [5, 4, 3, 4, 5],
	}
	df_no_duplicates = df.drop_duplicates()
	print(df_no_duplicates)

Q25. What is the difference between .loc and .iloc in Pandas?
>	import pandas as pd
	data = {
		'col1': [1, 2, 3, 4, 5],
		'col2': ['a', 'b', 'c', 'd', 'e'],
	}
	df = pd.DataFrame(data, index=['A', 'B', 'C', 'D', 'E'])

	#normal index based
	print(df.loc['B', 'col1'])  # Output: 2
	print(df.loc[['A', 'C'], 'col2'])
	#integer index based
	print(df.iloc[1, 0])  # Output: 2
	print(df.iloc[[0, 2], 1])